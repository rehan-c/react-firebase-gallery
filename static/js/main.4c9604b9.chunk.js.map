{"version":3,"sources":["comps/Title.js","firebase/config.js","hooks/useStorage.js","comps/ProgressBar.js","comps/UploadForm.js","hooks/useFirestore.js","comps/ImageGrid.js","comps/Modal.js","App.js","index.js"],"names":["Title","className","firebase","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","projectStorage","projectFirestore","timestamp","FieldValue","serverTimestamp","useStorage","file","useState","progress","setProgress","error","setError","url","setUrl","useEffect","storageRef","ref","name","collectionRef","collection","put","on","snap","percentage","bytesTransferred","totalBytes","err","a","getDownloadURL","createdAt","add","ProgressBar","setFile","style","width","UploadForm","types","type","onChange","e","selected","target","files","includes","useFirestore","docs","setDocs","unsub","orderBy","onSnapshot","documents","forEach","doc","push","data","id","ImageGrid","setSelectedImg","console","log","map","key","onClick","src","alt","Modal","selectedImg","classList","contains","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4c9604b9.chunk.js","sourcesContent":["import React from 'react';\n\nconst Title = () => {\n  return (\n    <div className=\"title\">\n      <h1>Firebase Gallery</h1>\n      <h2>Your Images</h2>\n      <p>App created by Rehan C</p>\n    </div>\n  )\n}\n\nexport default Title;","import * as firebase from 'firebase/app';\nimport 'firebase/storage';\nimport 'firebase/firestore';\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDDUx5E1i3RDiVSz5-EABptjPnFu9DbDQ8\",\n    authDomain: \"react-firebase-gallery-e3b99.firebaseapp.com\",\n    projectId: \"react-firebase-gallery-e3b99\",\n    storageBucket: \"react-firebase-gallery-e3b99.appspot.com\",\n    messagingSenderId: \"30116659333\",\n    appId: \"1:30116659333:web:916610712c6d2c498769ec\"\n  };\n  \n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nconst projectStorage = firebase.storage();\nconst projectFirestore = firebase.firestore();\nconst timestamp = firebase.firestore.FieldValue.serverTimestamp;\n\nexport { projectStorage, projectFirestore, timestamp };","import { useState, useEffect } from 'react';\nimport { projectStorage, projectFirestore, timestamp } from '../firebase/config';\n\nconst useStorage = (file) => {\n    const [progress, setProgress] = useState(0);\n    const [error, setError] = useState(null);\n    const [url, setUrl] = useState(null);\n\n    useEffect(() => {\n        // references\n        const storageRef = projectStorage.ref(file.name);\n        const collectionRef = projectFirestore.collection('images');\n        \n        storageRef.put(file).on('state_changed', (snap) => {\n            let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\n            setProgress(percentage);\n        }, (err) => {\n            setError(err)\n        }, async () => {\n            const url = await storageRef.getDownloadURL();\n            const createdAt = timestamp();\n            collectionRef.add({ url, createdAt });\n            setUrl(url);\n        })\n    }, [file]);\n\n    return { progress, url, error }\n\n}\n\nexport default useStorage;","import React, { useEffect } from 'react';\nimport useStorage from '../hooks/useStorage';\n\nconst ProgressBar = ({ file, setFile }) => {\n    const { url, progress } = useStorage(file);\n    \n    useEffect(() => {\n        if (url) {\n            setFile(null);\n        }\n    }, [url, setFile])\n\n    return (\n        <div className=\"progress-bar\" style={{ width: progress + '%' }}></div>\n    )\n\n}\n\nexport default ProgressBar;","import React, { useState } from 'react';\nimport ProgressBar from './ProgressBar';\n\nconst UploadForm = () => {\n    const [file, setFile] = useState(null);\n    const [error, setError] = useState(null);\n\n    const types = ['image/png', 'image/jpeg'];\n    \n    const changeHandler = (e) => {\n        let selected = e.target.files[0];\n        \n        if (selected && types.includes(selected.type)) {\n            setFile(selected);\n            setError('');\n        } else {\n            setFile(null);\n            setError('Please select an image file (png or jpeg)');\n        }\n    }\n    \n    return (\n        <form>\n            <input className=\"input\" type=\"file\" onChange={changeHandler} />\n            <div className=\"output\">\n                { error && <div className=\"error\">{error}</div>}\n                { file && <div>{file.name}</div> }\n                { file && <ProgressBar file={file} setFile={setFile} />}\n            </div>\n        </form>\n    )\n}\nexport default UploadForm;","import { useState, useEffect } from 'react';\nimport { projectFirestore } from '../firebase/config';\n\nconst useFirestore = (collection) => {\n    const [docs, setDocs] = useState([]);\n\n    useEffect(() => {\n        const unsub = projectFirestore.collection(collection)\n        .orderBy('createdAt', 'desc')\n        .onSnapshot((snap) => {\n            let documents = [];\n            snap.forEach(doc => {\n                documents.push({...doc.data(), id: doc.id});\n            });\n            setDocs(documents);\n        });\n\n        return () => unsub();\n\n    }, [collection])\n\n    return { docs };\n}\n\nexport default useFirestore;","import React from 'react';\nimport useFirestore from '../hooks/useFirestore';\n\nconst ImageGrid = ({ setSelectedImg }) => {\n    const { docs } = useFirestore('images');\n    console.log(docs);\n\n    return (\n        <div className=\"img-grid\">\n            { docs && docs.map(doc => (\n                <div className=\"img-wrap\" key={doc.id}\n                onClick={() => setSelectedImg(doc.url)}\n                >\n                    <img src={doc.url} alt=\"\" />\n                </div>\n            ))}\n        </div>\n    )\n\n}\n\nexport default ImageGrid;","import React from 'react';\n\nconst Modal = ({ selectedImg, setSelectedImg }) => {\n\n    const handleClick = (e) => {\n        if(e.target.classList.contains('backdrop')){\n            setSelectedImg(null);\n        }\n    }\n\n    return (\n        <div className=\"backdrop\" onClick={handleClick}>\n            <img src={selectedImg} alt=\"enlarged\" />\n        </div>\n    )\n\n}\n\nexport default Modal;","import React, { useState } from 'react';\nimport Title from './comps/Title';\nimport UploadForm from './comps/UploadForm';\nimport ImageGrid from './comps/ImageGrid';\nimport Modal from './comps/Modal';\n\nfunction App() {\n  const [selectedImg, setSelectedImg] = useState(null);\n\n  return (\n    <div className=\"App\">\n      <Title/>\n      <UploadForm />\n      <ImageGrid setSelectedImg={setSelectedImg} />\n      { selectedImg && <Modal selectedImg={selectedImg} setSelectedImg={setSelectedImg} /> }\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA"],"sourceRoot":""}